/* ============================================================

    The main scss file for the app.

    TABLE OF CONTENTS

    VARIABLES
    MIXINS
    APP

   ============================================================ */

/* VARIABLES
--------------------------------------------------------------- */

// Import our variables first so we can overwrite bootstraps
// @see https://getbootstrap.com/docs/4.3/getting-started/theming/#variable-defaults
// @see https://parceljs.org/recipes.html#customizing-bootstrap-styles
@import "variables.scss";
@import "~bootstrap/scss/bootstrap";

/* Set variables that depend on bootstrap variables */
$screen-mobile: map-get($grid-breakpoints, "md") - 1;
$screen-tablet: map-get($grid-breakpoints, "md");
$screen-desktop: map-get($grid-breakpoints, "lg");
$gray: map-get($colors, "gray");
$gray-dark: map-get($colors, "gray-dark");



  /* MIXINS
  --------------------------------------------------------------- */

@mixin tablet {
  @media (min-width: $screen-tablet) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: $screen-desktop) {
    @content;
  }
}

@mixin mobile {
  @media (max-width: $screen-mobile) {
    @content;
  }
}

// Translate the block to the center vertically
// and horizontally.
@mixin center-block($left: null, $right: null) {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Translate the block to the center vertically
// and set the `left` or `right` if provided.
@mixin v-center-block($left: null, $right: null) {
  position: absolute;
  @if variable-exists(left) {
    left: $left;
  }
  @if variable-exists(right) {
    right: $right;
  }
  top: 50%;
  transform: translateY(-50%);
}

// Translate the block to the center horizontally
// and set the `top` if provided.
@mixin h-center-block($top: null) {
  position: absolute;
  @if variable-exists(top) {
    top: $top;
  }
  left: 50%;
  transform: translateX(-50%);
}

@mixin bg-center-cover($img) {
  background: url($img) no-repeat center center scroll;
  background-size: cover;
}

@mixin bg-gradient($bgcolor: $primary, $transparency: 0.5) {
  background-color: $bgcolor;
  @include gradient-x-three-colors(
      $start-color: $bgcolor,
      $mid-color: transparentize($white, $transparency),
      $end-color: $bgcolor
  );
}

@mixin border-tail($color, $height: 18px, $width: 15px) {
  content: '';
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  margin: 0 auto;
  width: 0;
  height: 0;
  border-top: solid $height $color;
  border-left: solid $width transparent;
  border-right: solid $width transparent;
  z-index: 1;
}

@mixin shadow() {
  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.24);
}

// Button sizes with all 4 vertical and horizontal padding options.
@mixin button-size-full(
  $padding-top,
  $padding-right,
  $padding-bottom,
  $padding-left,
  $font-size,
  $line-height,
  $border-radius
) {
  padding: $padding-top $padding-right $padding-bottom $padding-left;
  font-size: $font-size;
  line-height: $line-height;
  border-radius: $border-radius;
}

// Copy of Bootstrap's ..scss/mixins/_buttons.scss#button-variant mixin.
// BS smartly chooses a dark (#111) color if the background is too light, this lets you
// override that and just specify the color in the two spots needed.
// @see node_modules/bootstrap/scss/mixins/_buttons.scss#button-variant
@mixin button-variant-with-color($color, $background, $border, $hover-background: darken($background, 7.5%), $hover-border: darken($border, 10%), $active-background: darken($background, 10%), $active-border: darken($border, 12.5%)) {
  // color: color-yiq($background);
  color: $color;
  @include gradient-bg($background);
  border-color: $border;
  @include box-shadow($btn-box-shadow);

  @include hover {
    // color: color-yiq($hover-background);
    color: $color;
    @include gradient-bg($hover-background);
    border-color: $hover-border;
  }

  &:focus,
  &.focus {
    // Avoid using mixin so we can pass custom focus shadow properly
    @if $enable-shadows {
      box-shadow: $btn-box-shadow, 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
    } @else {
      box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
    }
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    // color: color-yiq($background);
    color: $color;
    background-color: $background;
    border-color: $border;
    // Remove CSS gradients if they're enabled
    @if $enable-gradients {
      background-image: none;
    }
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    // color: color-yiq($active-background);
    color: $color;
    background-color: $active-background;
    @if $enable-gradients {
      background-image: none; // Remove the gradient for the pressed/active state
    }
    border-color: $active-border;

    &:focus {
      // Avoid using mixin so we can pass custom focus shadow properly
      @if $enable-shadows and $btn-active-box-shadow != none {
        box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
      } @else {
        box-shadow: 0 0 0 $btn-focus-width rgba(mix(color-yiq($background), $border, 15%), .5);
      }
    }
  }
}


// Override the primary button with our variant mixin to get the white color back
.btn-primary {
  @include button-variant-with-color(#fff, $primary, $primary);
}

/* APP - our global styles for our app
--------------------------------------------------------------- */
@import "_global";
